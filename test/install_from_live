#!/usr/bin/env bash

set -xeuo pipefail

export PATH="/root/arch-ostree:$PATH"

source /root/arch-ostree/lib/common.sh

disk="/dev/disk/by-id/ata-QEMU_HARDDISK_QM00002"
part_efi="/dev/disk/by-partlabel/efi"
part_boot="/dev/disk/by-partlabel/boot"
part_root="/dev/disk/by-partlabel/root"
supported_modes=(
	plain
	lukspart
)

task_cleanup() {
	umount -R /mnt || true
	cryptsetup close root || true
}

task_increase_cowspace() {
	mount -o remount,size=2G /run/archiso/cowspace
}

task_pacman_refresh() {
	pacman --noconfirm -Sy
}

task_prepare_disk() {
	sfdisk -w always "$disk" < "/root/arch-ostree/test/layout.sfdisk"
	sleep 1

	mkfs.vfat -F32 "$part_efi"
	mkfs.ext4 "$part_boot"

	case "$mode" in
		plain)
			mkfs.ext4 "$part_root"
		;;
		lukspart)
			echo -n test | cryptsetup -v luksFormat "$part_root" -
			echo -n test | cryptsetup open "$part_root" root -d -
			mkfs.ext4 /dev/mapper/root
		;;
	esac
}

task_mount() {
	case "$mode" in
		plain)
			mount "$part_root" /mnt
		;;
		lukspart)
			if [ ! -e /dev/mapper/root ]; then
				echo -n test | cryptsetup open "$part_root" root -d -
			fi

			mount /dev/mapper/root /mnt
		;;
	esac

	mkdir -p /mnt/boot
	mount "$part_boot" /mnt/boot

	mkdir -p /mnt/efi
	mount "$part_efi" /mnt/efi
}

task_prepare_live_env() {
	arch-ostree prepare_live_env
}

task_init_ostree() {
	ostree admin init-fs --sysroot /mnt --modern /mnt
	ostree admin stateroot-init --sysroot /mnt archlinux
	ostree config --repo /mnt/ostree/repo set sysroot.bootprefix 1
}

task_build_builder_container() {
	arch-ostree build_builder_container
}

task_build_rootfs() {
	arch-ostree \
		--aur-dir /mnt/setup/aur \
		--pacman-cache /mnt/setup/pacman_cache \
		--rootfs-dir /mnt/setup/rootfs \
		build_rootfs_directory \
		/root/arch-ostree/test/build_rootfs.sh
}

task_commit_rootfs() {
	arch-ostree \
		--rootfs-dir /mnt/setup/rootfs \
		--ostree-repo /mnt/ostree/repo \
		commit_rootfs_directory \
		-- -v -b test
}

task_create_deployment_env() {
	rm -rf /mnt/setup/deployment
	ostree checkout \
		--repo /mnt/ostree/repo \
		--require-hardlinks \
		test /mnt/setup/deployment
}

deploy_cmd() {
	arch-ostree \
		--deploy-env-dir /mnt/setup/deployment \
		--sysroot-dir /mnt \
		deploy_env -- "$@"
}

task_grub_install() {
	deploy_cmd grub-install \
		--target x86_64-efi \
		--efi-directory /efi \
		--bootloader-id=GRUB

	ln -sf ../loader/grub.cfg /mnt/boot/grub/grub.cfg
}

task_deploy() {
	rootuuid="$(blkid -o value -s UUID "$part_root")"
	kargs=()

	case "$mode" in
		plain)
			kargs+=(
				--karg=root=UUID="$rootuuid"
			)
		;;
		lukspart)
			kargs+=(
				--karg=rd.luks.name=$rootuuid=root
				--karg=root=/dev/mapper/root
			)
		;;
	esac


	deploy_cmd ostree admin deploy \
		--os=archlinux \
		--no-merge \
		--karg-none \
		"${kargs[@]}" \
		--karg=rw \
		test
}

task_install_ssh_key() {
	install -d /mnt/ostree/deploy/archlinux/var/roothome/.ssh
	install \
		-m 0644 \
		"/tmp/id_rsa.pub" \
		/mnt/ostree/deploy/archlinux/var/roothome/.ssh/authorized_keys
}

task_write_fstab() {
	genfstab -U /mnt >> /mnt/ostree/deploy/archlinux/deploy/*/etc/fstab
}

task_host_shell() {
	bash
}

task_deploy_shell() {
	deploy_cmd "${args[@]}"
}

task_poweroff() {
	systemctl poweroff
}

task_group_prepare_existing() {
	task_cleanup
	task_increase_cowspace
	task_pacman_refresh
	task_mount
	task_prepare_live_env
}

tasks=(
	cleanup
	increase_cowspace
	pacman_refresh
	prepare_disk
	mount
	prepare_live_env
	init_ostree
	build_builder_container
	build_rootfs
	commit_rootfs
	create_deployment_env
	grub_install
	deploy
	install_ssh_key
	write_fstab
)

mode="$1"
shift

if [ $# -ne 0 ]; then
	tasks=()

	for arg in "$@"; do
		shift

		if [ "$arg" = "--" ]; then
			break
		fi

		tasks+=("$arg")
	done

fi

args=("$@")

for task in "${tasks[@]}"; do
	if ! have_function "task_$task"; then
		die "Unsupported task: $task"
	fi
done

if [[ ! "${supported_modes[@]}" =~ "$mode" ]]; then
	die "Unsupported mode: $mode"
fi

for task in "${tasks[@]}"; do
	"task_$task"
done
