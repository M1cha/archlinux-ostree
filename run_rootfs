#!/bin/bash

set -euo pipefail

# shellcheck disable=SC2059 # $1 and $2 can contain the printf modifiers
out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> ERROR:" "$@"; } >&2
warning() { out "==> WARNING:" "$@"; } >&2
msg() { out "==>" "$@"; }
die() { error "$@"; exit 1; }

have_function() {
	declare -f "$1" >/dev/null
}

gitdir=$(dirname "$(readlink -f "$0")")
rootfs="$PWD/rootfs"
cachedir="$PWD/cache"
aurdir="$PWD/aur_packages"
script="$(realpath "$1")"
scriptdir=$(dirname "$script")

cd "$scriptdir"
source "$script"

post_install_args=()

post_install_args+=(-v "$aurdir:/tmp/aur")
if [ ! -z "${aur_packages+x}" ] && false; then
	mkdir -p "$aurdir"

	podman run \
		--rm -it \
		-v "$cachedir:/var/cache/pacman/pkg" \
		-v "$aurdir:/tmp/aur" \
		-v "$gitdir:/tmp/work" \
		-w /tmp/work \
		archlinux-pacstrap \
		/tmp/work/build_aur_packages \
		"${aur_packages[@]}"

	post_install_args+=(-v "$aurdir:/tmp/aur")
fi

if have_function prepare && true ; then
	rm -rf "$rootfs"
	if [ -e "$rootfs" ]; then
		die "Failed to delete rootfs directory"
	fi

	msg "Prepare"
	prepare
fi

if true ; then
	msg "Pacstrap"
	"$gitdir/run" \
		--pacman-cache "$cachedir" \
		pacstrap_rootfs_directory \
		"${packages[@]}"
fi

if true ; then
	msg "Post-install"
	podman run \
		"${post_install_args[@]}" \
		--rm -it \
		--tmpfs /tmp \
		--tmpfs /run \
		-v "$scriptdir:/tmp/work" \
		-v "$script:/tmp/script" \
		-v "$gitdir/build_rootfs_post_install:/tmp/entrypoint" \
		-w /tmp/work \
		--entrypoint /tmp/entrypoint \
		--rootfs "$rootfs"
fi

msg "Successful"
